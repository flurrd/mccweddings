(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{"2HFl":function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'CSS Reset and normalize'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Reset and normalize\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"},"7Cwn":function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'Buttons and links'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Utility classes (atomic css)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"},"9S7I":function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'CSS Grid vs Flexbox vs Float'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Utility classes (atomic css)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"},"9wKh":function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'Media queries and responsive breakpoints'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Utility classes (atomic css)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"},XK6L:function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'Images - background image vs inline image '\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Utility classes (atomic css)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n    <header>\r\n    <main>\r\n    <footer>\r\n    <div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"},dAwx:function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'Utility classes (atomic css)'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Utility classes (atomic css)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n    $increments: ('0':0, '1-4': 0.25, '1-2': 0.5, '1-3': 0.75, \r\n    '1':1 , '2':2 , '3':3 , '4': 4);\r\n    $positions-list: top, right, bottom, left;\r\n    $property-types: padding, margin;\r\n    $display-types: block, inline-block, flex;\r\n\r\n    @mixin create_margin_padding_classes($pos-list, $prop-type-list, \r\n    $inc-list, $unit-type) {\r\n    @each $pos-list-i in $pos-list {\r\n        @each $prop-type-i in $prop-type-list {\r\n        @each $inc-name, $inc-value in $inc-list {\r\n            @if $inc-value == 0 {\r\n            $unit-type: '';\r\n            }\r\n            @else if $inc-value == 'auto'{\r\n            $unit-type: '';\r\n            }\r\n            @else {\r\n            $unit-type: 'rem';\r\n            }\r\n            @if $inc-value == 'flex' {\r\n            @debug 'isflex'\r\n            }\r\n            $class1: str-slice($prop-type-i, 1,3);\r\n            $class2: str-slice($pos-list-i, 1,1);\r\n            .#{$class1}-#{$class2}-#{$inc-name} {\r\n            #{$prop-type-i}-#{$pos-list-i}: #{$inc-value}#{$unit-type} !important;\r\n            }\r\n        }\r\n        }\r\n    }\r\n    }\r\n\r\n    @include create_margin_padding_classes($positions-list, \r\n    $property-types, $increments, 'em');\r\n\r\n\r\nCompiles to\r\n\r\n    .pad-t-0 {\r\n    padding-top: 0 !important;\r\n    }\r\n\r\n    .pad-t-1-4 {\r\n    padding-top: 0.25rem !important;\r\n    }\r\n\r\n    .pad-t-1-2 {\r\n    padding-top: 0.5rem !important;\r\n    }\r\n\r\n    .pad-t-1-3 {\r\n    padding-top: 0.75rem !important;\r\n    }\r\n\r\n    .pad-t-1 {\r\n    padding-top: 1rem !important;\r\n    }\r\n\r\n    .pad-t-2 {\r\n    padding-top: 2rem !important;\r\n    }\r\n\r\n    .pad-t-3 {\r\n    padding-top: 3rem !important;\r\n    }\r\n\r\n    .pad-t-4 {\r\n    padding-top: 4rem !important;\r\n    }"},esRc:function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'Typography'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Utility classes (atomic css)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"},iiRY:function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'Custom css properties and variables'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Utility classes (atomic css)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"},nUPI:function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'CSS classes, use and naming (BEM style)'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# CSS classes, use and naming (BEM style)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"},pO1N:function(e,n,t){"use strict";t.r(n),n.default="---\r\nauthor: Maureen Catherine Crawley\r\nhero_image: ../static/sea.jpg\r\ntitle: 'Media queries and responsive breakpoints'\r\nseo_title: CSS Reset and normalize\r\ndescription: ACSS Reset and normalize\r\n---\r\n\r\n# Utility classes (atomic css)\r\n\r\n## Adding the primary container elements\r\nWe are going to start with the constant page elements, header, nav, main and footer.\r\nIt's important to use semantic html5 elements whenever possible.\r\n\r\nWhat are semantic elements?\r\nA semantic element clearly describes its meaning to both the browser and the developer.\r\nIn this case we are going to use. For the primary container of the site.\r\nhttps://html.com/semantic-markup/\r\n\r\n\r\n\r\n<header>\r\n<main>\r\n<footer>\r\n\r\n<div></div>\r\n\r\nhttps://www.w3schools.com/html/html5_semantic_elements.asp\r\n\r\n## Reset and normalize\r\nEvery browser has it's own default styles for every HTML element. You'll see these styles being applied to our navigation list and links.\r\n\r\nTo reset all links to be black with no underline we add a {color: black; text-decoration: none}. This can be considered as a reset as we are removing the default styles being set by the browser.\r\n\r\nIf we were to set it to be color: orange - that could be considered as a normalize  rule. Because we are setting a default rule, making it consitent across browsers.\r\nA very basic reset can look something like.\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sixing: border-box;\r\n    color: black;\r\n}\r\n\r\nThe * means all elements. So we are setting the box model and margin / padding of all elements to be the same.\r\n\r\n## CSS classes, use and naming (BEM style)\r\nCSS classes are set on elements using the class attribute. An a class can be specify to an element or be non specific like utility classes which we will look at next,\r\nFor now we will add element specific classes to are elements. When adding classes to children of a block element, like our nav list. I like to use a block element modifier naming convention. This will keep specificty low and make the code more readable.\r\nhttps://css-tricks.com/bem-101/\r\n\r\n\r\n\r\n## Utility classes (atomic css)\r\n\r\nCustom CSS properties (dynamic variables)\r\nUnlike element specific classes, utility classes like a toolbox of properties that can be set on a element without the need for a element specific class.\r\nMaking it good for effiency when coding as well as making it easy to see the set styles of an element by reading the class names.\r\n\r\nOnly to be used when that property doesn't change (e.g on mobile layout)\r\nI also limit there use for elements that have less than 4 util classes, if more than 4 i usuanlly create a element specific class.\r\n\r\nIn this tutorial we will use some util classes for display, margin and padding.\r\n\r\nhttps://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d\r\n\r\n## Custom css properties and variables\r\nUsing a custom css property for the site max width and setting it on a class means we can re use that class whenever we want to restrict max width of some content.\r\n\r\n\r\n\r\n## Content wrappers / containers\r\n\r\nA lot of developers like to set the max width on the main container and center it.\r\nI prefer to set it using a container inside a full width section, this allows us to style the full width block separate to its inner content.\r\nIn this tutorial we give it a bacground coloro , then use a class to set the max width of the inner content as well as centering it in the section.\r\n\r\n## CSS Grid vs Flexbox vs Float\r\n\r\n## Media queries and responsive breakpoints\r\n\r\n## Pseudo elements\r\n\r\n## Interactive styles for hover active and focus\r\n\r\n## Images - background image vs inline image \r\n\r\n## Typography\r\n\r\n## Buttons"}}]);